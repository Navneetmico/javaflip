name: Deploy to ECS node

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: write

jobs:
  deploy-to-develop:
    runs-on: ubuntu-latest
    environment: develop

    timeout-minutes: 60

    env:
      ECR_REPOSITORY: micovision-api-node
      ECS_CLUSTER: micovision-dev-cluster
      ECS_SERVICE: micovision-api-node
      ECS_CONTAINER_NAME: micovision-api-node
      ECS_TASK_DEFINITION: task-definition.json
      

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          lfs: true

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.IAM_ROLE_FOR_ECS_ARN }}
          role-session-name: ecs-deploy-session
          role-duration-seconds: 900
          aws-region: ap-northeast-1 

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Create metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}
          tags: type=sha,format=long

      - name: Output image
        id: output-image
        run: echo "::set-output name=image::${{ steps.meta.outputs.tags }}"

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2.5.0

      - name: Build image and push to ECR
        id: build-image
        uses: docker/build-push-action@v4
        with:
          context: ./micovision-bff-api/create-project
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition:task-definition: micovision-model/dynamic/micovision-api-node/deploy-properties/${{ env.ECS_TASK_DEFINITION }
          container-name: ${{ env.ECS_CONTAINER_NAME }}
          image: ${{ steps.output-image.outputs.image }}

      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
